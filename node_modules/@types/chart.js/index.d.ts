export interface ChartConfig {
    type: string;
    data: ChartData;
    options?: ChartOptions;
}
export interface ChartData {
    labels: string[];
    datasets: ChartDataSet[]
}
export interface ChartDataSet {
    label?: string;
    type?: string;
    data: number[];
    xAxisID?: string;
    yAxisID?: string;
    backgroundColor?: string | string[];
    hoverBackgroundColor?: string | string[];
    hoverBorderColor?: string | string[];
    hoverBorderWidth?: string | string[];
    borderColor?: string | string[];
    borderWidth?: number | number[];
    borderDash?: number | number[];
    borderDashOffset?: number;
    borderCapStyle?: string;
    borderJoinStyle?: string;
    borderSkipped?: string;
    cubicInterpolationMode?: string;
    fill?: string;
    lineTension?: number;
    pointBackgroundColor?: string | string[];
    pointBorderColor?: string | string[];
    pointBorderWidth?: number | number[];
    pointRadius?: number | number[];
    pointStyle?: string | string[];
    pointHitRadius?: number | number[];
    pointHoverBackgroundColor?: string | string[];
    pointHoverBorderColor?: string | string[];
    pointHoverBorderWidth?: number | number[];
    pointHoverRadius?: number | number[];
    showLine?: boolean;
    spanGaps?: boolean;
    steppedLine?: string;
}
export interface Scale{
    display?: boolean;
}
export interface ChartOptions {
    showLines?: boolean;
    spanGaps?: boolean;
    barPercentage?: number;
    categoryPercentage?: number;
    barThickness?: number;
    maxBarThickness?: number;
    Scale?: Scale;
}
export class Chart {
    constructor(context: CanvasRenderingContext2D, config: ChartConfig);
}